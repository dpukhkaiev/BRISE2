{
    "Context": {
        "TaskConfiguration": {
            "TaskName": "test",
            "MaxTimeToRunTask": 10,
            "TimeUnit": "seconds",
            "Scenario": {},
            "Objectives": {
                "Y1": {
                    "Name": "Y1",
                    "DataType": "float",
                    "Minimization": true,
                    "MinExpectedValue": 0,
                    "MaxExpectedValue": 100
                }
            }
        },
        "SearchSpace": {
            "X1": {
                "Lower": 0.0,
                "Upper": 1.0,
                "Default": 0.0,
                "Type": "FloatHyperparameter",
                "Level": 0
            },
            "X2": {
                "Lower": 0.0,
                "Upper": 1.0,
                "Default": 0.5,
                "Type": "FloatHyperparameter",
                "Level": 0
            },
            "Structure": {
                "Flat": {}
            }
        }
    },
    "ConfigurationSelection": {
        "SamplingStrategy": {
            "Sobol": {
                "Seed": 1,
                "Type": "sobol"
            }
        },
        "Predictor": {
            "WindowSize": 1.0,
            "Model": {
                "Surrogate": {
                    "ConfigurationTransformers": {
                        "FloatTransformer": {
                            "SklearnFloatMinMaxScaler": {
                                "Type": "sklearn_float_transformer",
                                "Class": "sklearn.MinMaxScaler"
                            }
                        }
                    },
                    "Instance": {
                        "TreeParzenEstimator": {
                            "MultiObjective": false,
                            "Parameters": {
                                "top_n_percent": 30,
                                "random_fraction": 0.1,
                                "bandwidth_factor": 3.0,
                                "min_bandwidth": 0.001
                            },
                            "Type": "tree_parzen_estimator"
                        }
                    }
                },
                "Optimizer": {
                    "ConfigurationTransformers": {
                        "FloatTransformer": {
                            "SklearnFloatMinMaxScaler": {
                                "Type": "sklearn_float_transformer",
                                "Class": "sklearn.MinMaxScaler"
                            }
                        }
                    },
                    "ValueTransformers": {
                        "AcquisitionFunction": {
                            "TPE_EI": {
                                "Type": "tpe_ei"
                            }
                        }
                    },
                    "Instance": {
                        "MOEA": {
                            "Generations": 10,
                            "PopulationSize": 100,
                            "Algorithms": {
                                "GACO": {
                                    "MultiObjective": false
                                }
                            },
                            "Type": "moea"
                        }
                    }
                },
                "Validator": {
                    "ExternalValidator": {
                        "MockValidator": {
                            "Type": "mock_validator"
                        }
                    }
                },
                "CandidateSelector": {
                    "BestMultiPointProposal": {
                        "NumberOfPoints": 1,
                        "Type": "best_multi_point"
                    }
                }
            }
        }
    },
    "RepetitionManager": {
        "MaxFailedTasksPerConfiguration": 1,
        "Instance": {
            "QuantityBased": {
                "MaxTasksPerConfiguration": 10,
                "Type": "quantity_based"
            }
        }
    },
    "StopCondition": {
        "Instance": {
            "BadConfigurationBasedSC": {
                "Parameters": {
                    "MaxBadConfigurations": 5
                },
                "Type": "bad_configuration_based",
                "Name": "b"
            }
        },
        "StopConditionTriggerLogic": {
            "Expression": "b",
            "InspectionParameters": {
                "RepetitionPeriod": 1,
                "TimeUnit": "seconds"
            }
        }
    },
    "TransferLearning": {
        "TransferExpediencyDetermination": {
            "SamplingLandmarkBased": {
                "MinNumberOfSamples": 10,
                "Type": "sampling_landmark_based",
                "Comparator": {
                    "NormDifference": {
                        "Type": "norm_difference_comparator"
                    }
                },
                "ExperimentsQuantity": {
                    "FixedQuantity": {
                        "NumberOfSimilarExperiments": 2
                    }
                }
            }
        },
        "ModelRecommendation": {
            "DynamicModelsRecommendation": {
                "RecommendationGranularity": {
                    "Infinite": {
                        "Value": Infinity
                    }
                },
                "PerformanceMetric": {
                    "AverageRelativeImprovement": {
                        "Type": "average_relative_improvement"
                    }
                },
                "Type": "dynamic_model_recommendation",
                "ThresholdType": "Hard",
                "TimeToBuildModelThreshold": 0.5,
                "TimeUnit": "seconds"
            }
        },
        "MultiTaskLearning": {
            "Filters": {
                "OldNewRatio": {
                    "Type": "old_new_ratio",
                    "OldNewConfigsRatio": 0.5
                },
                "OnlyBestConfigurations": {
                    "Type": "only_best"
                }
            }
        }
    },
    "DefaultConfigurationHandler": {
        "RandomDCH": {
            "Type": "random_default_config_handler"
        }
    }
}
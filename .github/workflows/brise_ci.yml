# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: BRISE-CI

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master, dev ]

jobs:
  docker-build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set Up Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Set environmental variables
      shell: bash -el {0}
      run: |
        test_vars=$(cat deployment_settings/CITestDeployment.json | jq -r 'to_entries | map("\(.key)=\(.value|tostring)") | .[]')
        echo "$test_vars" >> $GITHUB_ENV
        echo $GITHUB_ENV

    - name: Start Services with Docker Compose
      run: |
        ./brise.sh up -m test
        docker ps
        export REAL_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mongo-db-test)
        echo "BRISE_DATABASE_HOST=$REAL_IP" >> $GITHUB_ENV

    # Setup Python
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: 3.12
    # Set up Miniconda
    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v2
      with:
        activate-environment: brise-260
        environment-file: ./main_node/environment.yml
        python-version: 3.12
        miniconda-version: "latest"
        auto-update-conda: true
        auto-activate-base: false
    - name: Lint with flake8
      shell: bash -el {0}
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --config tox.ini --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=50 --max-line-length=300 --statistics
    - name: Test with pytest
      shell: bash -el {0}
      run: |
        docker ps
        cd main_node
        pytest